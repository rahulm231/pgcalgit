<?php /* Author : Neena Thakur */

function pgc_custom_preprocess_html(&$variables) {
	
	$current_path = current_path();
    if (strpos($current_path, 'edit/gifttypes')!==FALSE || strpos($current_path, 'edit/org')!==FALSE || strpos($current_path, 'edit/giftcalcs')!==FALSE) {
    	
	  // #GEP-24 - Starts here
	  if(strpos($current_path, 'edit/giftcalcs')!==FALSE){
	  	drupal_add_js ('https://code.jquery.com/ui/1.12.1/jquery-ui.js');	
	  }  
	  // #GEP-24 - Starts here
	  
	  drupal_add_js (drupal_get_path('module','pgc_custom').'/js/pgc_custom.js');	  
    }
	
	
	  
	 
}

function pgc_custom_form_alter(&$form, $form_state, $form_id){
 
  /*  #GEP-3 - Starts */
  if($form_id=='user_profile_form'){
  	if(isset($form['account'])){
  		
  	  $form['account']['mail']['#title'] = "Email address for messages other than password reset";
	  $form['account']['mail']['#description'] = "A valid email address. All emails from the system will be sent to this address except when resetting a password. The email address is not made public and will only be used if you wish to receive certain news or notifications by email.";
	  
	  if(empty($form['#user']->field_password_reset_email)){
	  	$form['field_password_reset_email']['und'][0]['email']['#default_value'] = $form['#user']->mail;
	  }
	  
	  $form['account']['mail']['#weight'] = $form['account']['name']['#weight'] + 1;
      $form['field_password_reset_email']['#weight'] = $form['account']['mail']['#weight'] + 1;
      $form['account']['field_password_reset_email'] = $form['field_password_reset_email'];
      unset($form['field_password_reset_email']);	
	  
	  if(isset($form['account']['current_pass'])){
	    $form['account']['current_pass']['#description'] = str_replace('E-mail address', 'E-mail address for messages other than password reset', $form['account']['current_pass']['#description']);
	  }
	  
	  
	  $form['#validate'][] = '_pgc_custom_password_reset_email_validate';
	  //echo "<pre>"; print_r($form);die;
  	}	
  }
  
  if($form_id=='user_pass'){
  	$form['name']['#title'] = 'Email address for password reset';
  	$form['#validate'][0] = '_pgc_custom_password_user_pass_validate';
	$form['#submit'][0] = '_pgc_custom_password_user_pass_submit';
  }
  /*  #GEP-3 - Ends */
}

/*  #GEP-3 - Starts */
function _pgc_custom_password_reset_email_validate(&$form, &$form_state){
  
  if(isset($form_state['values']['field_password_reset_email']['und'])){
    $pwd_reset_email = $form_state['values']['field_password_reset_email']['und'][0]['email'];	
	
    $field_pwd_reset_email = db_select("field_data_field_password_reset_email", "pre")
      ->fields("pre", array('field_password_reset_email_email'))
      ->condition('pre.field_password_reset_email_email',$pwd_reset_email)
	  ->condition('pre.entity_id',arg(1),'!=')
      ->execute()
      ->fetchField();  
	  
    if($field_pwd_reset_email!=''){      
      form_set_error('field_password_reset_email', t('The "Email address for password reset" that you have entered is already in use by another account. Please change it and Save again.'));	
    }	
    return $form;	
  }  
}

function _pgc_custom_password_user_pass_validate(&$form, &$form_state){
  
    $name = trim($form_state['values']['name']);
	
    $field_pwd_reset_email_uid = db_select("field_data_field_password_reset_email", "pre")
      ->fields("pre", array('entity_id'))
      ->condition('pre.field_password_reset_email_email',$name)
      ->execute()
      ->fetchField();  
	  
    if($field_pwd_reset_email_uid==''){
      $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  	  $account = reset($users);
	  if (!$account) {
        form_set_error('name', t('Sorry, %name is not recognized as a Email address for password reset.', array('%name' => $name)));
	  }else{
	    form_set_value(array('#parents' => array('account')), $account, $form_state);
	  }
    }else{
      $users = user_load_multiple(array(), array('uid' => $field_pwd_reset_email_uid, 'status' => '1'));
      $account = reset($users);
	  form_set_value(array('#parents' => array('account')), $account, $form_state);
    }
    return $form;	
  
}

function _pgc_custom_password_user_pass_submit(&$form, &$form_state){
  global $language;

  $account = $form_state['values']['account'];
  $email = $form_state['values']['name'];
  // Mail one time login URL and instructions using current language.
  $mail = _pgc_custom_user_password_reset_mail_notify($account, $email, $language);
  if (!empty($mail)) {
    watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $email));
    drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
  }else{
  	drupal_set_message(t('Mail not sent!'));
  }

  $form_state['redirect'] = 'user';
  return;
}

function _pgc_custom_user_password_reset_mail_notify($account, $email, $language = NULL) {
  
  $params['account'] = $account;
  $language = $language ? $language : user_preferred_language($account);
  $mail = drupal_mail('user', 'password_reset', $email, $language, $params);
  return empty($mail) ? NULL : $mail['result'];
}
/*  #GEP-3 - Ends */



function pgc_custom_form_profile2_form_alter(&$form, &$form_state) {
  
  if (isset($form['profile_giftcalcs'])) {
  	
  	// #PGCS-337
	$form['profile_giftcalcs']['field_gc_config_oo_label_col']['und'][0]['value']['#attributes']['disabled'] = 1;
	
	// #GEP-24 - Starts Here
	$gift_type_array = pgc_giftcalcs_gift_type_order($form['profile_giftcalcs']['#entity']->uid);
	$gift_type_order_options = array();
	$i = 0;
	$gift_type_order_html = '<ul id="sortable">';
	foreach($gift_type_array as $gift_type){
	  $key = $gift_type['value'];
	  $gift_type_order_options[$key] = $gift_type['text'];	  
	  $gift_type_order_html.= '<li class="ui-state-default" id="'.$key.'"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>'.$gift_type['text'].'</li>';
	  $i++;	
	}
	$gift_type_order_html.='</ul>';
	
	$form['profile_giftcalcs']['field_gc_config_gifttype_order']['und']['#options'] = $gift_type_order_options; 
	
	$form['profile_giftcalcs']['field_gc_config_gifttype_order']['und']['#suffix'] = $gift_type_order_html; 
	// #GEP-24 - Ends Here
	
	// #GEP-11	
	$form['#submit'][] = "_pgc_custom_allow_birthdates_submit";
  }
  
  if (isset($form['profile_gifttypes'])) {
  	// #GEP-28 
  	$form['#validate'][] = "_pgc_custom_enabled_gift_validate";
	
  	// #GEP-11	
	$form['#submit'][] = "_pgc_custom_gift_term_type_submit";
	
  	// #GEP-26 - starts  	
	if($form['profile_gifttypes']['field_all_label']['und'][0]['value']['#default_value']==''){
	  $form['profile_gifttypes']['field_all_label']['und'][0]['value']['#default_value'] = 	'Life Income Plan';
	}
	
	if($form['profile_gifttypes']['field_all_description']['und'][0]['value']['#default_value']==''){
	  $description = "1.	You make an irrevocable gift of cash, securities, or other property to [charity_nickname].
2.	[charity_nickname] makes payments to you or to anyone you name each year for life. The payments may be for a fixed amount or vary each year, depending on the gift plan you choose.
3.	When your gift plan ends, its remaining principal passes to [charity_nickname].";
	  $form['profile_gifttypes']['field_all_description']['und'][0]['value']['#default_value'] = $description;
	}	
	
	if(empty($form['profile_gifttypes']['field_all_default_diagram']['und']['#default_value'])){
	  $form['profile_gifttypes']['field_all_default_diagram']['und']['#default_value'][0] = 'all';
	  unset($form['profile_gifttypes']['field_all_default_diagram']['und']['#options']['_none']);
	}
	// #GEP-26 - ends
	
	// #GEP-4 - starts
	$form['profile_gifttypes']['field_all_default_diagram']['und']['#element_validate'][] = "_pgc_custom_validate_default_diagram";
  }
}

// #GEP-4
function _pgc_custom_validate_default_diagram(&$form, &$form_state){
	
  $profile_types = $form_state['values']['profile_gifttypes'];
  if(isset($profile_types['field_all_default_diagram']['und'][0])){
  	$default_diagram_value = $profile_types['field_all_default_diagram']['und'][0]['value'];
	
	if(isset($profile_types['field_all_enabled']['und']) && $profile_types['field_all_enabled']['und']==1){
	  if($default_diagram_value!='all'){
	  	if(isset($profile_types['field_'.$default_diagram_value.'_enabled']['und']) && $profile_types['field_'.$default_diagram_value.'_enabled']['und'][0]['value']===0){
	  	/*if(isset($profile_types['field_'.$default_diagram_value.'_enabled']['und']) && $profile_types['field_'.$default_diagram_value.'_enabled']['und']!==1){*/
	  	  
		  $field_name = "field_".$default_diagram_value."_label";
		  $field_lable = $form["#entity"]->$field_name;
	  	  $gift_type_lable = $field_lable['und'][0]['value'];
	  	  $message = 'The gift type selected in All Gifts > Default Diagram ('.$gift_type_lable.') is not enabled. Please select an enabled gift type.';
	  	  form_set_error('field_all_default_diagram',$message);	
	    }
	  }		
	}
  }
	
}

// #GEP-11
function _pgc_custom_allow_birthdates_submit(&$form, &$form_state){
  $profile_types = $form_state['values']['profile_giftcalcs'];
  //echo "<pre>"; print_r($profile_types); die;
  if(isset($profile_types['field_gc_config_allow_birthdates']['und'][0])){
  	$allow_birthdates = $profile_types['field_gc_config_allow_birthdates']['und'][0]['value'];
	if($allow_birthdates==1){
	  $profile = profile2_load_by_user(arg(1), 'gifttypes');
	  foreach (pgc_appserver_get_enabled_gift_abbrs(arg(1)) as $abbr) {
	    $field = 'field_' . $abbr . '_term_type';
	    if (isset($profile->$field)) {
	      $term_type = $profile->{$field}[LANGUAGE_NONE][0]['value'];
		  if($term_type=='b'){
		  	drupal_set_message(t('One or more gift types are set to have a default Term Type of "Beneficiary Birthdate(s)" in the Gift Types tab. This setting will be ignored because the "Let user enter beneficiary ages, but not beneficiary birth dates" box is checked.'), 'warning');
		  }
		}
	  }
	}
  }
}

function _pgc_custom_enabled_gift_validate(&$form, &$form_state){
  //echo "<pre>"; print_r($form['profile_gifttypes']['field_bqt_min_gift']); die;
  $GiftTypeFields = $form_state['input']['profile_gifttypes'];
  $gifttypes = pgc_appserver_gift_type_name_map();  
  foreach($gifttypes as $key=>$value){  	
  	if($form_state['input']['profile_gifttypes']['field_'.$key.'_enabled']['und']==1){  		
  	  $fields = array_keys($form_state['input']['profile_gifttypes']);
	  foreach($fields as $field){
	  	$searchkey = "_".$key."_";
		// #GEP-59 - starts here
	  	//if($field!=='field_'.$key.'_enabled' && strpos($field, $searchkey)){
	  	if($field!=='field_'.$key.'_enabled' && strpos($field, $searchkey) && $field!=='field_'.$key.'_description'){
	  	// #GEP-59 - ends here
	  	  $field_value = $form_state['input']['profile_gifttypes'][$field]['und'];
	  	  if($field_value=="_none"){
	  	    form_set_error($form['profile_gifttypes'][$field]['und']['#field_name'], $value.': '.$form['profile_gifttypes'][$field]['und']['#title'].' is required.'); 		
	  	  }elseif(isset($field_value[0]['value']) && $field_value[0]['value']==''){
		    form_set_error($field, $value.': '.$form['profile_gifttypes'][$field]['und']['#title'].' is required.');	
		  }
	  	}
	  }
  	}	
  }
  // #GEP-68 - Starts here
  if($form_state['input']['profile_gifttypes']['field_all_default_diagram']['und']=='bqt' && $form_state['input']['profile_gifttypes']['field_bqt_in_gifttype_menu']['und']!=1){
	 form_set_error($form['profile_gifttypes']['field_bqt_in_gifttype_menu']['und']['#field_name'], 'To choose Bequest as “Default Diagram” in All Gifts gift type, mark "Include Bequest in Gift Type menu for All Gifts diagram" checkbox in Bequest gift type.');	
  } 
  // #GEP-68 - Ends here
  //echo "<pre>"; print_r($form_state['input']); 
  //die;	
}

function _pgc_custom_gift_term_type_submit(&$form, &$form_state){
  $profile_types = $form_state['values']['profile_gifttypes'];
  $profile = profile2_load_by_user(arg(1), 'giftcalcs');
  //echo "<pre>"; print_r($profile_types); die;
  if(isset($profile->field_gc_config_allow_birthdates['und'][0]) && $profile->field_gc_config_allow_birthdates['und'][0]['value']==1){
  	$term_type_array = array();
  	foreach ($profile_types as $key=>$value) {
  	  if(strpos($key, '_term_type')!==FALSE){
  	    $term_type_array[] = $profile_types[$key]['und'][0]['value'];	
  	  }  	    
    }
    if(in_array('b', $term_type_array)){
	  	drupal_set_message(t('One or more gift types are set to have a default Term Type of "Beneficiary Birthdate(s)". This setting will be ignored because the "Let user enter beneficiary ages, but not beneficiary birth dates" box in the GiftCalcs > General Settings tab is checked.'), 'warning');
	}
  }
  
}

/* #GEP-12 */
function pgc_custom_views_query_alter(&$view, &$query) {

  global $user;
  if ($view->name == 'media_default' && $view->current_display == 'media_browser_1' && current_path()=='media/browser') {	
	if(isset($view->query->where[2])){
	  if(isset($view->query->where[2]['conditions'][1]) && $view->query->where[2]['conditions'][1]['field']=='users_file_managed.uid'){
	  	$url_array = explode("/",$_SERVER['HTTP_REFERER']); 
    	$uid = $url_array['4'];	
	    $view->query->where[2]['conditions'][1]['value'] = $uid;		
	  }      
	}	
  }
}